// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(MEMBER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects Project[] @relation("ProjectOwner")
  assignedTasks Task[]    @relation("TaskAssignee")
  comments      Comment[]
  attachments   Attachment[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner  User   @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks  Task[]
  labels Label[]

  @@map("projects")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(BACKLOG)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  assigneeId  String?
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments    Comment[]
  attachments Attachment[]
  labels      TaskLabel[]

  @@map("tasks")
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   TaskLabel[]

  @@unique([name, projectId])
  @@map("labels")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  taskId       String
  uploadedById String
  createdAt    DateTime @default(now())

  // Relations
  task        Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy  User @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model TaskLabel {
  taskId  String
  labelId String

  // Relations
  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
  @@map("task_labels")
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum TaskStatus {
  BACKLOG
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
